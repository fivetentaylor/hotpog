// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, expires_at)
VALUES ($1, NOW() + interval '30 days')
RETURNING id
`

func (q *Queries) CreateSession(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createSession, userID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash)
VALUES ($1, $2)
RETURNING id
`

type CreateUserParams struct {
	Email        string
	PasswordHash sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password_hash, email_verified_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID              uuid.UUID
	PasswordHash    sql.NullString
	EmailVerifiedAt sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.PasswordHash, &i.EmailVerifiedAt)
	return i, err
}

const getValidSession = `-- name: GetValidSession :one

SELECT s.id, s.user_id, u.email 
FROM sessions s
JOIN users u ON s.user_id = u.id
WHERE s.id = $1 
 AND s.expires_at > NOW()
 AND u.email_verified_at IS NOT NULL
`

type GetValidSessionRow struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Email  string
}

// internal/db/queries/auth.sql
func (q *Queries) GetValidSession(ctx context.Context, id uuid.UUID) (GetValidSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getValidSession, id)
	var i GetValidSessionRow
	err := row.Scan(&i.ID, &i.UserID, &i.Email)
	return i, err
}
